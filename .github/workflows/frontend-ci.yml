name: Frontend CI

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'

jobs:
  build-and-test:
    name: Build & Test Frontend
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run linter
        run: npm run lint

      - name: Build production bundle
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
          NEXT_PUBLIC_USE_MOCK_DATA: true

      - name: Check for build artifacts
        run: |
          if [ ! -d ".next" ]; then
            echo "Error: .next directory not found"
            exit 1
          fi
          echo "Build artifacts verified ✅"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '20.x'
        with:
          name: next-build
          path: frontend/.next
          retention-days: 7

  lint-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Check for console logs (CI safety)
        run: |
          if grep -r "console\\.log" src/ --exclude-dir=node_modules --exclude-dir=.next; then
            echo "⚠️ Warning: console.log statements found (non-blocking)"
          else
            echo "✅ No console.log statements found"
          fi
        continue-on-error: true

      - name: Check for TypeScript errors
        run: npm run type-check

      - name: Check package vulnerabilities
        run: npm audit --audit-level=high
        continue-on-error: true
