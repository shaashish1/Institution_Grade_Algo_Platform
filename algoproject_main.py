#!/usr/bin/env python3
"""
AlgoProject - Complete Trading Platform
======================================

Main trading platform with backtesting, demo trading, and live trading capabilities.
"""

import os
import sys
import json
from datetime import datetime
from pathlib import Path

# Add current directory to Python path
sys.path.insert(0, str(Path(__file__).parent))

def print_banner():
    """Print AlgoProject banner"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                          üöÄ ALGOPROJECT TRADING PLATFORM                     ‚ïë
‚ïë                     Crypto & Stock Trading ‚Ä¢ Backtesting ‚Ä¢ Live Trading     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def main():
    """Main AlgoProject trading platform"""
    print_banner()
    print(f"üìÖ Started: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üè† Personal Trading Platform - Full Functionality")
    print()
    
    while True:
        print("\nüéØ AlgoProject Trading Platform:")
        print("=" * 50)
        print("1. üí∞ Crypto Trading")
        print("2. üìà Stock Trading")
        print("3. üß† Strategy Management")
        print("4. üìä Backtesting Engine")
        print("5. üéÆ Demo Trading")
        print("6. üöÄ Live Trading")
        print("7. üìã Portfolio Management")
        print("8. ‚öôÔ∏è  System Configuration")
        print("9. üîç System Health Check")
        print("10. üö™ Exit")
        
        try:
            choice = input("\nEnter your choice (1-10): ").strip()
            
            if choice == "1":
                crypto_trading_menu()
            elif choice == "2":
                stock_trading_menu()
            elif choice == "3":
                strategy_management_menu()
            elif choice == "4":
                backtesting_menu()
            elif choice == "5":
                demo_trading_menu()
            elif choice == "6":
                live_trading_menu()
            elif choice == "7":
                portfolio_management_menu()
            elif choice == "8":
                system_configuration_menu()
            elif choice == "9":
                system_health_check()
            elif choice == "10":
                print("\nüëã Thank you for using AlgoProject! Happy trading!")
                break
            else:
                print("‚ùå Invalid choice. Please try again.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Goodbye!")
            break
        except Exception as e:
            print(f"‚ùå Error: {e}")

def crypto_trading_menu():
    """Crypto trading submenu"""
    print("\nüí∞ Crypto Trading Platform")
    print("=" * 30)
    
    try:
        # Import crypto modules
        from trading_platform.crypto.crypto_trader import CryptoTrader
        from trading_platform.crypto.asset_manager import CryptoAssetManager
        
        asset_manager = CryptoAssetManager()
        trader = CryptoTrader()
        
        while True:
            print("\nüí∞ Crypto Trading Options:")
            print("1. üìã View Available Crypto Assets")
            print("2. üìä Get Market Data")
            print("3. üîç Technical Analysis")
            print("4. üìà Price Charts")
            print("5. ‚öôÔ∏è  Configure Exchanges")
            print("6. üîô Back to Main Menu")
            
            choice = input("\nEnter your choice (1-6): ").strip()
            
            if choice == "1":
                assets = asset_manager.get_available_assets()
                print(f"\nüìã Available Crypto Assets ({len(assets)} total):")
                for i, asset in enumerate(assets[:20], 1):  # Show first 20
                    print(f"  {i:2d}. {asset['symbol']} - {asset['name']} ({asset['exchange']})")
                if len(assets) > 20:
                    print(f"  ... and {len(assets) - 20} more assets")
                    
            elif choice == "2":
                symbol = input("Enter crypto symbol (e.g., BTC/USDT): ").strip().upper()
                if symbol:
                    market_data = trader.get_market_data(symbol)
                    if market_data:
                        print(f"\nüìä Market Data for {symbol}:")
                        print(f"  Price: ${market_data.get('price', 'N/A')}")
                        print(f"  24h Change: {market_data.get('change_24h', 'N/A')}%")
                        print(f"  Volume: {market_data.get('volume', 'N/A')}")
                        print(f"  Last Updated: {market_data.get('timestamp', 'N/A')}")
                    
            elif choice == "3":
                symbol = input("Enter crypto symbol for analysis: ").strip().upper()
                if symbol:
                    analysis = trader.technical_analysis(symbol)
                    if analysis:
                        print(f"\nüîç Technical Analysis for {symbol}:")
                        for indicator, value in analysis.items():
                            print(f"  {indicator}: {value}")
                            
            elif choice == "4":
                symbol = input("Enter crypto symbol for chart: ").strip().upper()
                timeframe = input("Enter timeframe (1h, 4h, 1d): ").strip() or "1h"
                if symbol:
                    print(f"üìà Generating chart for {symbol} ({timeframe})...")
                    trader.show_price_chart(symbol, timeframe)
                    
            elif choice == "5":
                trader.configure_exchanges()
                
            elif choice == "6":
                break
            else:
                print("‚ùå Invalid choice.")
                
    except ImportError as e:
        print(f"‚ùå Crypto trading module not available: {e}")
        print("üí° Installing crypto trading components...")
        create_crypto_trading_module()
    except Exception as e:
        print(f"‚ùå Error in crypto trading: {e}")

def stock_trading_menu():
    """Stock trading submenu"""
    print("\nüìà Stock Trading Platform")
    print("=" * 30)
    
    try:
        from trading_platform.stocks.stock_trader import StockTrader
        from trading_platform.stocks.asset_manager import StockAssetManager
        
        asset_manager = StockAssetManager()
        trader = StockTrader()
        
        while True:
            print("\nüìà Stock Trading Options:")
            print("1. üìã View Available Stocks")
            print("2. üìä Get Stock Quote")
            print("3. üîç Fundamental Analysis")
            print("4. üìà Stock Charts")
            print("5. üèõÔ∏è  Market Overview")
            print("6. üîô Back to Main Menu")
            
            choice = input("\nEnter your choice (1-6): ").strip()
            
            if choice == "1":
                assets = asset_manager.get_available_stocks()
                print(f"\nüìã Available Stocks ({len(assets)} total):")
                for i, asset in enumerate(assets[:15], 1):  # Show first 15
                    print(f"  {i:2d}. {asset['symbol']} - {asset['name']} ({asset['sector']})")
                if len(assets) > 15:
                    print(f"  ... and {len(assets) - 15} more stocks")
                    
            elif choice == "2":
                symbol = input("Enter stock symbol (e.g., NSE:SBIN-EQ): ").strip().upper()
                if symbol:
                    quote = trader.get_stock_quote(symbol)
                    if quote:
                        print(f"\nüìä Stock Quote for {symbol}:")
                        print(f"  Price: ‚Çπ{quote.get('price', 'N/A')}")
                        print(f"  Change: {quote.get('change', 'N/A')} ({quote.get('change_percent', 'N/A')}%)")
                        print(f"  Volume: {quote.get('volume', 'N/A')}")
                        print(f"  Market Cap: ‚Çπ{quote.get('market_cap', 'N/A')}")
                        
            elif choice == "3":
                symbol = input("Enter stock symbol for analysis: ").strip().upper()
                if symbol:
                    analysis = trader.fundamental_analysis(symbol)
                    if analysis:
                        print(f"\nüîç Fundamental Analysis for {symbol}:")
                        for metric, value in analysis.items():
                            print(f"  {metric}: {value}")
                            
            elif choice == "4":
                symbol = input("Enter stock symbol for chart: ").strip().upper()
                period = input("Enter period (1d, 5d, 1mo, 3mo, 1y): ").strip() or "1mo"
                if symbol:
                    print(f"üìà Generating chart for {symbol} ({period})...")
                    trader.show_stock_chart(symbol, period)
                    
            elif choice == "5":
                trader.show_market_overview()
                
            elif choice == "6":
                break
            else:
                print("‚ùå Invalid choice.")
                
    except ImportError as e:
        print(f"‚ùå Stock trading module not available: {e}")
        print("üí° Installing stock trading components...")
        create_stock_trading_module()
    except Exception as e:
        print(f"‚ùå Error in stock trading: {e}")

def strategy_management_menu():
    """Strategy management submenu"""
    print("\nüß† Strategy Management")
    print("=" * 25)
    
    try:
        from trading_platform.strategies.strategy_manager import StrategyManager
        
        strategy_manager = StrategyManager()
        
        while True:
            print("\nüß† Strategy Management Options:")
            print("1. üìã List Available Strategies")
            print("2. ‚ûï Create New Strategy")
            print("3. ‚öôÔ∏è  Configure Strategy Parameters")
            print("4. üß™ Test Strategy")
            print("5. üìä Strategy Performance")
            print("6. üîô Back to Main Menu")
            
            choice = input("\nEnter your choice (1-6): ").strip()
            
            if choice == "1":
                strategies = strategy_manager.list_strategies()
                print(f"\nüìã Available Strategies ({len(strategies)} total):")
                for i, strategy in enumerate(strategies, 1):
                    print(f"  {i:2d}. {strategy['name']} - {strategy['description']}")
                    print(f"      Type: {strategy['type']} | Risk: {strategy['risk_level']}")
                    
            elif choice == "2":
                strategy_manager.create_strategy_wizard()
                
            elif choice == "3":
                strategy_name = input("Enter strategy name to configure: ").strip()
                if strategy_name:
                    strategy_manager.configure_strategy(strategy_name)
                    
            elif choice == "4":
                strategy_name = input("Enter strategy name to test: ").strip()
                if strategy_name:
                    strategy_manager.test_strategy(strategy_name)
                    
            elif choice == "5":
                strategy_name = input("Enter strategy name for performance: ").strip()
                if strategy_name:
                    strategy_manager.show_strategy_performance(strategy_name)
                    
            elif choice == "6":
                break
            else:
                print("‚ùå Invalid choice.")
                
    except ImportError as e:
        print(f"‚ùå Strategy management module not available: {e}")
        print("üí° Installing strategy management components...")
        create_strategy_management_module()
    except Exception as e:
        print(f"‚ùå Error in strategy management: {e}")

def backtesting_menu():
    """Backtesting submenu"""
    print("\nüìä Backtesting Engine")
    print("=" * 25)
    
    try:
        from trading_platform.backtesting.backtest_engine import BacktestEngine
        
        backtest_engine = BacktestEngine()
        
        while True:
            print("\nüìä Backtesting Options:")
            print("1. üöÄ Quick Backtest")
            print("2. üîß Advanced Backtest Setup")
            print("3. üìà View Backtest Results")
            print("4. üìä Compare Strategies")
            print("5. üìã Backtest History")
            print("6. üîô Back to Main Menu")
            
            choice = input("\nEnter your choice (1-6): ").strip()
            
            if choice == "1":
                backtest_engine.quick_backtest_wizard()
                
            elif choice == "2":
                backtest_engine.advanced_backtest_setup()
                
            elif choice == "3":
                backtest_engine.view_results()
                
            elif choice == "4":
                backtest_engine.compare_strategies()
                
            elif choice == "5":
                backtest_engine.show_backtest_history()
                
            elif choice == "6":
                break
            else:
                print("‚ùå Invalid choice.")
                
    except ImportError as e:
        print(f"‚ùå Backtesting module not available: {e}")
        print("üí° Installing backtesting components...")
        create_backtesting_module()
    except Exception as e:
        print(f"‚ùå Error in backtesting: {e}")

def demo_trading_menu():
    """Demo trading submenu"""
    print("\nüéÆ Demo Trading")
    print("=" * 20)
    
    try:
        from trading_platform.demo.demo_trader import DemoTrader
        
        demo_trader = DemoTrader()
        
        while True:
            print("\nüéÆ Demo Trading Options:")
            print("1. üí∞ Check Demo Balance")
            print("2. üìã View Demo Portfolio")
            print("3. üõí Place Demo Order")
            print("4. üìä Demo Trading History")
            print("5. üîÑ Reset Demo Account")
            print("6. üîô Back to Main Menu")
            
            choice = input("\nEnter your choice (1-6): ").strip()
            
            if choice == "1":
                demo_trader.show_balance()
                
            elif choice == "2":
                demo_trader.show_portfolio()
                
            elif choice == "3":
                demo_trader.place_order_wizard()
                
            elif choice == "4":
                demo_trader.show_trading_history()
                
            elif choice == "5":
                confirm = input("Are you sure you want to reset demo account? (yes/no): ").lower()
                if confirm == "yes":
                    demo_trader.reset_account()
                    
            elif choice == "6":
                break
            else:
                print("‚ùå Invalid choice.")
                
    except ImportError as e:
        print(f"‚ùå Demo trading module not available: {e}")
        print("üí° Installing demo trading components...")
        create_demo_trading_module()
    except Exception as e:
        print(f"‚ùå Error in demo trading: {e}")

def live_trading_menu():
    """Live trading submenu"""
    print("\nüöÄ Live Trading")
    print("=" * 20)
    print("‚ö†Ô∏è  WARNING: This involves real money and real trades!")
    
    confirm = input("Do you want to proceed with live trading? (yes/no): ").lower()
    if confirm != "yes":
        print("‚úÖ Live trading cancelled.")
        return
    
    try:
        from trading_platform.live.live_trader import LiveTrader
        
        live_trader = LiveTrader()
        
        while True:
            print("\nüöÄ Live Trading Options:")
            print("1. üîê Connect to Exchange/Broker")
            print("2. üí∞ Check Live Balance")
            print("3. üìã View Live Portfolio")
            print("4. üõí Place Live Order")
            print("5. üìä Live Trading History")
            print("6. ü§ñ Start Automated Trading")
            print("7. üõë Stop All Trading")
            print("8. üîô Back to Main Menu")
            
            choice = input("\nEnter your choice (1-8): ").strip()
            
            if choice == "1":
                live_trader.connect_to_exchange()
                
            elif choice == "2":
                live_trader.show_live_balance()
                
            elif choice == "3":
                live_trader.show_live_portfolio()
                
            elif choice == "4":
                live_trader.place_live_order_wizard()
                
            elif choice == "5":
                live_trader.show_live_trading_history()
                
            elif choice == "6":
                live_trader.start_automated_trading()
                
            elif choice == "7":
                live_trader.stop_all_trading()
                
            elif choice == "8":
                break
            else:
                print("‚ùå Invalid choice.")
                
    except ImportError as e:
        print(f"‚ùå Live trading module not available: {e}")
        print("üí° Installing live trading components...")
        create_live_trading_module()
    except Exception as e:
        print(f"‚ùå Error in live trading: {e}")

def portfolio_management_menu():
    """Portfolio management submenu"""
    print("\nüìã Portfolio Management")
    print("=" * 25)
    
    try:
        from trading_platform.portfolio.portfolio_manager import PortfolioManager
        
        portfolio_manager = PortfolioManager()
        
        while True:
            print("\nüìã Portfolio Management Options:")
            print("1. üìä Portfolio Overview")
            print("2. üìà Performance Analysis")
            print("3. ‚öñÔ∏è  Risk Analysis")
            print("4. üéØ Rebalancing")
            print("5. üìã Holdings Report")
            print("6. üîô Back to Main Menu")
            
            choice = input("\nEnter your choice (1-6): ").strip()
            
            if choice == "1":
                portfolio_manager.show_overview()
                
            elif choice == "2":
                portfolio_manager.performance_analysis()
                
            elif choice == "3":
                portfolio_manager.risk_analysis()
                
            elif choice == "4":
                portfolio_manager.rebalancing_wizard()
                
            elif choice == "5":
                portfolio_manager.generate_holdings_report()
                
            elif choice == "6":
                break
            else:
                print("‚ùå Invalid choice.")
                
    except ImportError as e:
        print(f"‚ùå Portfolio management module not available: {e}")
        print("üí° Installing portfolio management components...")
        create_portfolio_management_module()
    except Exception as e:
        print(f"‚ùå Error in portfolio management: {e}")

def system_configuration_menu():
    """System configuration submenu"""
    print("\n‚öôÔ∏è  System Configuration")
    print("=" * 25)
    
    print("\n‚öôÔ∏è  Configuration Options:")
    print("1. üîë API Keys & Credentials")
    print("2. üìä Data Sources")
    print("3. üéØ Trading Preferences")
    print("4. üîî Notifications")
    print("5. üìÅ File Locations")
    print("6. üîô Back to Main Menu")
    
    choice = input("\nEnter your choice (1-6): ").strip()
    
    if choice == "1":
        configure_api_keys()
    elif choice == "2":
        configure_data_sources()
    elif choice == "3":
        configure_trading_preferences()
    elif choice == "4":
        configure_notifications()
    elif choice == "5":
        configure_file_locations()
    elif choice == "6":
        return
    else:
        print("‚ùå Invalid choice.")

def system_health_check():
    """Run system health check"""
    print("\nüîç System Health Check")
    print("=" * 25)
    
    print("üîç Checking system components...")
    
    # Check Python environment
    print(f"‚úÖ Python: {sys.version.split()[0]}")
    
    # Check required packages
    required_packages = [
        "pandas", "numpy", "requests", "matplotlib", 
        "ccxt", "yfinance", "ta", "plotly"
    ]
    
    print("\nüì¶ Package Check:")
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}: OK")
        except ImportError:
            print(f"‚ùå {package}: Missing")
    
    # Check directories
    print("\nüìÅ Directory Structure:")
    directories = [
        "trading_platform",
        "trading_platform/crypto",
        "trading_platform/stocks", 
        "trading_platform/strategies",
        "trading_platform/backtesting",
        "data",
        "logs",
        "reports"
    ]
    
    for directory in directories:
        if Path(directory).exists():
            print(f"‚úÖ {directory}/: OK")
        else:
            print(f"‚ùå {directory}/: Missing")
            Path(directory).mkdir(parents=True, exist_ok=True)
            print(f"‚úÖ Created: {directory}/")
    
    print("\nüéØ System Health Check Complete!")

# Configuration functions
def configure_api_keys():
    """Configure API keys"""
    print("\nüîë API Keys & Credentials Configuration")
    print("=" * 40)
    print("Configure your exchange and broker API keys:")
    print("1. Crypto Exchange APIs (Binance, Coinbase, etc.)")
    print("2. Stock Broker APIs (Fyers, Zerodha, etc.)")
    print("3. Data Provider APIs (Alpha Vantage, etc.)")
    print("\nüí° API keys will be stored securely in config files")

def configure_data_sources():
    """Configure data sources"""
    print("\nüìä Data Sources Configuration")
    print("=" * 30)
    print("Available data sources:")
    print("‚Ä¢ Crypto: CCXT (100+ exchanges)")
    print("‚Ä¢ Stocks: Yahoo Finance, Fyers API")
    print("‚Ä¢ Technical Analysis: TA-Lib, pandas-ta")

def configure_trading_preferences():
    """Configure trading preferences"""
    print("\nüéØ Trading Preferences")
    print("=" * 25)
    print("Set your trading preferences:")
    print("‚Ä¢ Risk tolerance")
    print("‚Ä¢ Position sizing")
    print("‚Ä¢ Stop loss levels")
    print("‚Ä¢ Take profit targets")

def configure_notifications():
    """Configure notifications"""
    print("\nüîî Notifications Configuration")
    print("=" * 30)
    print("Configure alerts and notifications:")
    print("‚Ä¢ Email notifications")
    print("‚Ä¢ SMS alerts")
    print("‚Ä¢ Desktop notifications")
    print("‚Ä¢ Trading signals")

def configure_file_locations():
    """Configure file locations"""
    print("\nüìÅ File Locations Configuration")
    print("=" * 35)
    print("Current file locations:")
    print(f"‚Ä¢ Data: {Path('data').absolute()}")
    print(f"‚Ä¢ Logs: {Path('logs').absolute()}")
    print(f"‚Ä¢ Reports: {Path('reports').absolute()}")
    print(f"‚Ä¢ Config: {Path('config').absolute()}")

# Module creation functions (stubs for now)
def create_crypto_trading_module():
    """Create crypto trading module"""
    print("üîß Creating crypto trading module...")
    # This would create the actual crypto trading implementation

def create_stock_trading_module():
    """Create stock trading module"""
    print("üîß Creating stock trading module...")
    # This would create the actual stock trading implementation

def create_strategy_management_module():
    """Create strategy management module"""
    print("üîß Creating strategy management module...")
    # This would create the actual strategy management implementation

def create_backtesting_module():
    """Create backtesting module"""
    print("üîß Creating backtesting module...")
    # This would create the actual backtesting implementation

def create_demo_trading_module():
    """Create demo trading module"""
    print("üîß Creating demo trading module...")
    # This would create the actual demo trading implementation

def create_live_trading_module():
    """Create live trading module"""
    print("üîß Creating live trading module...")
    # This would create the actual live trading implementation

def create_portfolio_management_module():
    """Create portfolio management module"""
    print("üîß Creating portfolio management module...")
    # This would create the actual portfolio management implementation

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Goodbye!")
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        sys.exit(1)